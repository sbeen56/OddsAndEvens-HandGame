package nz.ac.auckland.se281;

import nz.ac.auckland.se281.Main.Choice;

/**
 * This class implements the ArtIntPlayer interface. This class represents the hard AI player that
 * switches between the top and random strategy.
 */
public class HardArtIntPlayer implements ArtIntPlayer {
  private Strategy strategy;
  private String ai = "HAL-9000";
  private Choice choice;
  private int finger;

  /**
   * This method sets the strategy for the AI player.
   *
   * @param strategy strategy to be set
   */
  @Override
  public void setStrategy(Strategy strategy) {
    this.strategy = strategy;
  }

  /**
   * This method sets the choice of the AI player.
   *
   * @param choice choice from the human player
   */
  @Override
  public void setArtIntPlayer(Choice choice) {
    switch (choice) {
      case EVEN:
        this.choice = Choice.ODD;
        break;

      case ODD:
        this.choice = Choice.EVEN;
        break;

      default:
        break;
    }
  }

  /**
   * This method generates a finger for the AI player. It uses the random strategy to generate a
   * finger for the first 3 rounds. After that, it switches between the top and random strategy
   * based on the winner of the previous round.
   *
   * @param winner winner of the previous round
   * @param round round of the game
   * @param oddCount number of odd numbers of human player
   * @param evenCount number of even numbers of human player
   * @return int finger generated by the AI player
   */
  @Override
  public int makeMove(String winner, int round, int oddCount, int evenCount) {
    if (round < 4) {
      setStrategy(new RandomStrategy());
    } else {
      if (!winner.equals("HAL-9000")) {
        if (strategy instanceof RandomStrategy) {
          setStrategy(new TopStrategy());
        } else {
          setStrategy(new RandomStrategy());
        }
      }
    }

    this.finger = strategy.play(round, oddCount, evenCount, choice);
    return finger;
  }

  /**
   * This method returns the saved finger generated by the AI player. This method does not generate
   * a new finger. It is used to calculate the sum of fingers of the AI player and the human player.
   *
   * @return int finger generated by the AI player
   */
  @Override
  public int getMove() {
    return finger;
  }

  /**
   * This method returns the choice of the AI player. It returns the opposite choice of the human
   * player. It is used when checking the winner of the round.
   *
   * @return Choice choice of the AI player
   */
  @Override
  public Choice getArtIntChoice() {
    return choice;
  }

  /**
   * This method returns the name of the AI player.
   *
   * @return String name of the AI player
   */
  @Override
  public String getArtIntName() {
    return ai;
  }

  /** This method prints the move of the AI player. */
  @Override
  public void printMove() {
    MessageCli.PRINT_INFO_HAND.printMessage(ai, Integer.toString(finger));
  }
}
